// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package sqlc

import (
	"context"
	"encoding/json"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(customer, username, total_price)
VALUES ($1, $2, $3) RETURNING id, customer, username, total_price, created_at, updated_at
`

type CreateOrderParams struct {
	Customer   string  `json:"customer"`
	Username   string  `json:"username"`
	TotalPrice float64 `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.Customer, arg.Username, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Customer,
		&i.Username,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrdersWithTickets = `-- name: CreateOrder :one
SELECT * FROM order_with_tickets_view;
`
func (q *Queries) ListOrdersWithTickets(ctx context.Context) ([]Order, error) {
	var orders []Order

	rows, err := q.db.QueryContext(ctx, "SELECT * FROM order_with_tickets_view")
	if err != nil {
		return orders, err
	}
	defer rows.Close()

	for rows.Next() {
		var o Order
		var ticketsJSON []byte
		err := rows.Scan(&o.ID, &o.Customer, &o.Username, &o.TotalPrice, &ticketsJSON)
		if err != nil {
			return orders, err
		}
		err = json.Unmarshal(ticketsJSON, &o.Tickets)
		if err != nil {
			return orders, err
		}
		orders = append(orders, o)
	}
	return orders, nil
}

